
import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author gustav.andoff
 */
public class Rityta extends javax.swing.JPanel {

    private Board board = new Board();
    private int lastXIndexPressed = -1;
    private int lastYIndexPressed = -1;
    private String sortWhiteType = "time";
    private boolean sortWhiteFlipped = false;
    private String sortBlackType = "time";
    private boolean sortBlackFlipped = false;
    private String searchedWhitePiece;
    private String searchedBlackPiece;
    private int pawnX;
    private int pawnY;

    /**
     * Creates new form Rityta
     */
    public Rityta() {
        initComponents();
        pnlChoosePiece.setVisible(false);
        btnOpenChooser.setVisible(false);
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        board.draw(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txaBlack = new javax.swing.JTextArea();
        lblCapturedBlack = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaWhite = new javax.swing.JTextArea();
        lblCapturedWhite = new javax.swing.JLabel();
        btnBlackSortTime = new javax.swing.JButton();
        btnBlackSortAlphabet = new javax.swing.JButton();
        btnBlackSortFlip = new javax.swing.JButton();
        btnWhiteSortTime = new javax.swing.JButton();
        btnWhiteSortAlphabet = new javax.swing.JButton();
        btnWhiteSortFlip = new javax.swing.JButton();
        lblBlackSearch = new javax.swing.JLabel();
        txfBlackSearch = new javax.swing.JTextField();
        btnBlackSearch = new javax.swing.JButton();
        lblWhiteSearch = new javax.swing.JLabel();
        txfWhiteSearch = new javax.swing.JTextField();
        btnWhiteSearch = new javax.swing.JButton();
        pnlChoosePiece = new javax.swing.JPanel();
        lblChoosePiece = new javax.swing.JLabel();
        txaPieceList = new javax.swing.JTextArea();
        txfChoosePiece = new javax.swing.JTextField();
        btnChoosePiece = new javax.swing.JButton();
        btnCloseChooser = new javax.swing.JButton();
        btnOpenChooser = new javax.swing.JButton();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txaBlack.setEditable(false);
        txaBlack.setColumns(20);
        txaBlack.setRows(5);
        jScrollPane1.setViewportView(txaBlack);

        lblCapturedBlack.setText("Fångade svarta pjäser");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txaWhite.setEditable(false);
        txaWhite.setColumns(20);
        txaWhite.setRows(5);
        jScrollPane2.setViewportView(txaWhite);

        lblCapturedWhite.setText("Fångade vita pjäser");

        btnBlackSortTime.setText("Sortera efter tid");
        btnBlackSortTime.setEnabled(false);
        btnBlackSortTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlackSortTimeActionPerformed(evt);
            }
        });

        btnBlackSortAlphabet.setText("Sortera efter bokstavsordning");
        btnBlackSortAlphabet.setEnabled(false);
        btnBlackSortAlphabet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlackSortAlphabetActionPerformed(evt);
            }
        });

        btnBlackSortFlip.setText("Byt håll");
        btnBlackSortFlip.setEnabled(false);
        btnBlackSortFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlackSortFlipActionPerformed(evt);
            }
        });

        btnWhiteSortTime.setText("Sortera efter tid");
        btnWhiteSortTime.setEnabled(false);
        btnWhiteSortTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWhiteSortTimeActionPerformed(evt);
            }
        });

        btnWhiteSortAlphabet.setText("Sortera efter bokstavsordning");
        btnWhiteSortAlphabet.setEnabled(false);
        btnWhiteSortAlphabet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWhiteSortAlphabetActionPerformed(evt);
            }
        });

        btnWhiteSortFlip.setText("Byt håll");
        btnWhiteSortFlip.setEnabled(false);
        btnWhiteSortFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWhiteSortFlipActionPerformed(evt);
            }
        });

        lblBlackSearch.setText("Sök efter fångad pjäs:");

        txfBlackSearch.setEnabled(false);
        txfBlackSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txfBlackSearchCaretUpdate(evt);
            }
        });
        txfBlackSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfBlackSearchActionPerformed(evt);
            }
        });

        btnBlackSearch.setText("Sök");
        btnBlackSearch.setEnabled(false);
        btnBlackSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlackSearchActionPerformed(evt);
            }
        });

        lblWhiteSearch.setText("Sök efter fångad pjäs:");

        txfWhiteSearch.setEnabled(false);
        txfWhiteSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txfWhiteSearchCaretUpdate(evt);
            }
        });
        txfWhiteSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfWhiteSearchActionPerformed(evt);
            }
        });

        btnWhiteSearch.setText("Sök");
        btnWhiteSearch.setEnabled(false);
        btnWhiteSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWhiteSearchActionPerformed(evt);
            }
        });

        lblChoosePiece.setText("Välj vilken pjäs bonden ska bli genom att skriva en siffra i rutan");

        txaPieceList.setEditable(false);
        txaPieceList.setColumns(20);
        txaPieceList.setRows(5);
        txaPieceList.setText("1 - Torn\n2 - Häst\n3 - Löpare\n4 - Drottning");

        txfChoosePiece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfChoosePieceActionPerformed(evt);
            }
        });

        btnChoosePiece.setText("Välj");
        btnChoosePiece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChoosePieceActionPerformed(evt);
            }
        });

        btnCloseChooser.setText("Göm ruta");
        btnCloseChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlChoosePieceLayout = new javax.swing.GroupLayout(pnlChoosePiece);
        pnlChoosePiece.setLayout(pnlChoosePieceLayout);
        pnlChoosePieceLayout.setHorizontalGroup(
            pnlChoosePieceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChoosePieceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlChoosePieceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlChoosePieceLayout.createSequentialGroup()
                        .addComponent(txaPieceList, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlChoosePieceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChoosePiece, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfChoosePiece, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnCloseChooser)
                    .addComponent(lblChoosePiece))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlChoosePieceLayout.setVerticalGroup(
            pnlChoosePieceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChoosePieceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCloseChooser)
                .addGap(18, 18, 18)
                .addComponent(lblChoosePiece)
                .addGap(27, 27, 27)
                .addGroup(pnlChoosePieceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txaPieceList, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlChoosePieceLayout.createSequentialGroup()
                        .addComponent(txfChoosePiece, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChoosePiece)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnOpenChooser.setText("Visa ruta");
        btnOpenChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlChoosePiece, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnOpenChooser)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnWhiteSortTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnWhiteSortAlphabet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnWhiteSortFlip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblWhiteSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txfWhiteSearch)
                                .addComponent(btnWhiteSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(lblCapturedWhite))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblCapturedBlack)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnBlackSortTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBlackSortAlphabet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBlackSortFlip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblBlackSearch)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addComponent(btnBlackSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txfBlackSearch)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCapturedBlack)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBlackSortTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBlackSortAlphabet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBlackSortFlip)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblBlackSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txfBlackSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBlackSearch))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addComponent(lblCapturedWhite)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnWhiteSortTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnWhiteSortAlphabet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnWhiteSortFlip)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblWhiteSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txfWhiteSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnWhiteSearch))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(pnlChoosePiece, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOpenChooser)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        repaint();
        int x = evt.getX();
        int y = evt.getY();
        Piece[][] boardArray = board.getBoard();

        for (int i = 0; i < 8; i++) { // går igenom alla index (rutor) på brädet
            for (int k = 0; k < 8; k++) {
                if (boardArray[i][k] != null) { // om index i innehåller någon pjäs (inte är tom)
                    for (int j = 0; j < boardArray[i][k].getMds().size(); j++) { // kör en gång för varje MoveDisplayer som pjäsen med index i k har
                        MoveDisplayer md = boardArray[i][k].getMds().get(j); // sätter md till md med plats j i ArrayListen mds hos pjäsen med index i k

                        // kolla om muspekaren är innanför MoveDisplayen md  (det som visar var pjäserna kan gå)
                        if (x > md.getX() - ((1 - boardArray[i][k].getMoveDisplayerSizeMult()) / 2) * board.getSquareSize()
                                && x < md.getX() + board.getSquareSize() - ((1 - boardArray[i][k].getMoveDisplayerSizeMult()) / 2) * board.getSquareSize()
                                && y > md.getY() - ((1 - boardArray[i][k].getMoveDisplayerSizeMult()) / 2) * board.getSquareSize()
                                && y < md.getY() + board.getSquareSize() - ((1 - boardArray[i][k].getMoveDisplayerSizeMult()) / 2) * board.getSquareSize()) {
                            if (boardArray[md.getxIndex()][md.getyIndex()] != null) {
                                if (md.getColor() == Color.red) { // om man ska göra rockad är md:n röd istället för grön
                                    int xRIndex, yRIndex, xKIndex, yKIndex;
                                    if (boardArray[md.getxIndex()][md.getyIndex()].getName().equals("rook")) {
                                        xRIndex = md.getxIndex();
                                        yRIndex = md.getyIndex();
                                        xKIndex = i;
                                        yKIndex = k;
                                    } else {
                                        xRIndex = i;
                                        yRIndex = k;
                                        xKIndex = md.getxIndex();
                                        yKIndex = md.getyIndex();
                                    }
                                    board.castle(xRIndex, yRIndex, xKIndex, yKIndex);
                                } else {
                                    if (board.addCaptured(md.getxIndex(), md.getyIndex()).equals("white")) {
                                        btnWhiteSortTime.setEnabled(true);
                                        btnWhiteSortAlphabet.setEnabled(true);
                                        btnWhiteSortFlip.setEnabled(true);
                                        txfWhiteSearch.setEnabled(true);
                                        btnWhiteSearch.setEnabled(true);
                                    } else {
                                        btnBlackSortTime.setEnabled(true);
                                        btnBlackSortAlphabet.setEnabled(true);
                                        btnBlackSortFlip.setEnabled(true);
                                        txfBlackSearch.setEnabled(true);
                                        btnBlackSearch.setEnabled(true);
                                    }

                                    updateTextAreas();
                                    if (board.movePiece(i, k, md.getxIndex(), md.getyIndex())) { // flytta pjäsen på plats i till platsen som MoveDisplayern har. metoden returnerar true ska rutan där man kan välja vilken pjäs bonden ska bli dyka upp
                                        pnlChoosePiece.setVisible(true);
                                        pawnX = md.getxIndex();
                                        pawnY = md.getyIndex();
                                    }
                                }
                            } else {
                                if (board.movePiece(i, k, md.getxIndex(), md.getyIndex())) {
                                    pnlChoosePiece.setVisible(true);
                                    pawnX = md.getxIndex();
                                    pawnY = md.getyIndex();
                                }
                            }
                            lastXIndexPressed = -1;
                            lastYIndexPressed = -1;
                            return; // den ska inte fortsätta leta efter det som musen tryckt på när den redan har hittat det
                        }

                    }
                    boardArray[i][k].clearMds();

                    // kolla om muspekaren är innanför rutan [i][k]
                    if (x > boardArray[i][k].getX() - ((1 - board.getPieceSizeMult()) / 2) * board.getSquareSize()
                            && x < boardArray[i][k].getX() + board.getSquareSize() - ((1 - board.getPieceSizeMult()) / 2) * board.getSquareSize()
                            && y > boardArray[i][k].getY() - ((1 - board.getPieceSizeMult()) / 2) * board.getSquareSize()
                            && y < boardArray[i][k].getY() + board.getSquareSize() - ((1 - board.getPieceSizeMult()) / 2) * board.getSquareSize()) {
                        if (i == lastXIndexPressed && k == lastYIndexPressed) { // om man trycker på samma pjäs igen ska MovDisplayer:na försvinna.
                            lastXIndexPressed = -1; // den sätts till något utanför brädets index så att man kan trycker på alla pjäser igen
                            lastYIndexPressed = -1;
                            break;
                        } else {
                            lastXIndexPressed = i;
                            lastYIndexPressed = k;
                            board.showMoves(i, k);
                        }
                    }
                }
                repaint();
            }
        }

    }//GEN-LAST:event_formMousePressed

    private void btnBlackSortFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlackSortFlipActionPerformed
        // TODO add your handling code here:
        sortBlackFlipped = !sortBlackFlipped;
        updateTextAreas();
    }//GEN-LAST:event_btnBlackSortFlipActionPerformed

    private void btnWhiteSortFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWhiteSortFlipActionPerformed
        // TODO add your handling code here:
        sortWhiteFlipped = !sortWhiteFlipped;
        updateTextAreas();
    }//GEN-LAST:event_btnWhiteSortFlipActionPerformed

    private void btnBlackSortTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlackSortTimeActionPerformed
        // TODO add your handling code here:
        sortBlackType = "time";
        updateTextAreas();
    }//GEN-LAST:event_btnBlackSortTimeActionPerformed

    private void btnBlackSortAlphabetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlackSortAlphabetActionPerformed
        // TODO add your handling code here:
        sortBlackType = "alphabet";
        updateTextAreas();
    }//GEN-LAST:event_btnBlackSortAlphabetActionPerformed

    private void btnWhiteSortTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWhiteSortTimeActionPerformed
        // TODO add your handling code here:
        sortWhiteType = "time";
        updateTextAreas();
    }//GEN-LAST:event_btnWhiteSortTimeActionPerformed

    private void btnWhiteSortAlphabetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWhiteSortAlphabetActionPerformed
        // TODO add your handling code here:
        sortWhiteType = "alphabet";
        updateTextAreas();
    }//GEN-LAST:event_btnWhiteSortAlphabetActionPerformed

    private void txfBlackSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfBlackSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfBlackSearchActionPerformed

    private void txfBlackSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txfBlackSearchCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_txfBlackSearchCaretUpdate

    private void btnBlackSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlackSearchActionPerformed
        // TODO add your handling code here:
        searchedBlackPiece = txfBlackSearch.getText().toLowerCase();
        txfBlackSearch.setText("");
        updateTextAreas();
    }//GEN-LAST:event_btnBlackSearchActionPerformed

    private void txfWhiteSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txfWhiteSearchCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_txfWhiteSearchCaretUpdate

    private void txfWhiteSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfWhiteSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfWhiteSearchActionPerformed

    private void btnWhiteSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWhiteSearchActionPerformed
        // TODO add your handling code here:
        searchedWhitePiece = txfWhiteSearch.getText().toLowerCase();
        txfWhiteSearch.setText("");
        updateTextAreas();
    }//GEN-LAST:event_btnWhiteSearchActionPerformed

    private void txfChoosePieceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfChoosePieceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfChoosePieceActionPerformed

    private void btnCloseChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseChooserActionPerformed
        // TODO add your handling code here:
        pnlChoosePiece.setVisible(false);
        btnOpenChooser.setVisible(true);
    }//GEN-LAST:event_btnCloseChooserActionPerformed

    private void btnOpenChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenChooserActionPerformed
        // TODO add your handling code here:
        pnlChoosePiece.setVisible(true);
        btnOpenChooser.setVisible(false);
    }//GEN-LAST:event_btnOpenChooserActionPerformed

    private void btnChoosePieceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChoosePieceActionPerformed
        // TODO add your handling code here:
        int choice;
        String pawnName = "pawn";
        try {
            choice = Integer.valueOf(txfChoosePiece.getText());
            if (choice > 4 || choice < 1) {
                JOptionPane.showMessageDialog(null, "Siffran måste vara från 1 till 4", "Utanför nummergräns", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Rutan får bara innehålla siffor", "Fel format", JOptionPane.ERROR_MESSAGE);
            return;
        }
        switch (choice) {
            case 1:
                pawnName = "rook";
                break;
            case 2:
                pawnName = "knight";
                break;
            case 3:
                pawnName = "bishop";
                break;
            case 4:
                pawnName = "queen";
                break;
        }
        txfChoosePiece.setText("");
        pnlChoosePiece.setVisible(false);
        board.setBoardPieceName(pawnX, pawnY, pawnName);
        repaint();
        board.pieceMoved(pawnX, pawnY);
    }//GEN-LAST:event_btnChoosePieceActionPerformed

    /**
     * updaterar textrutorna som visar vilka pjäser som har blivit tagna
     */
    private void updateTextAreas() {
        Piece[] capturedWhitePieces = board.getCapturedWhitePieces();
        Piece[] capturedBlackPieces = board.getCapturedBlackPieces();
        String[] capturedWhiteNames = new String[board.getCapturedWhiteAmount()];
        String[] capturedBlackNames = new String[board.getCapturedBlackAmount()];
        String res;

        for (int i = 0; i < board.getCapturedWhiteAmount(); i++) {
            capturedWhiteNames[i] = capturedWhitePieces[i].toString().toLowerCase();
        }
        for (int i = 0; i < board.getCapturedBlackAmount(); i++) {
            capturedBlackNames[i] = capturedBlackPieces[i].toString().toLowerCase();
        }

        txaWhite.setText("");
        txaBlack.setText("");

        if (sortWhiteType.equals("alphabet")) {
            sortAlphabet(capturedWhiteNames);
        }
        if (sortWhiteFlipped) {
            flipArray(capturedWhiteNames);
        }
        for (int i = 0; i < board.getCapturedWhiteAmount(); i++) {
            res = "";
            if (capturedWhiteNames[i].equals(searchedWhitePiece)) {
                res += " - ";
            }
            res += capturedWhiteNames[i] + "\n";
            txaWhite.append(res);
        }

        if (sortBlackType.equals("alphabet")) {
            sortAlphabet(capturedBlackNames);
        }
        if (sortBlackFlipped) {
            flipArray(capturedBlackNames);
        }
        for (int i = 0; i < board.getCapturedBlackAmount(); i++) {
            res = "";
            if (capturedBlackNames[i].equals(searchedBlackPiece)) {
                res += " - ";
            }
            res += capturedBlackNames[i] + "\n";
            txaBlack.append(res);
        }
    }

    /**
     * vänder en array bakochfram
     *
     * @param stringArray arrayn som ska vändas
     * @return den bakvända arrayn
     */
    private String[] flipArray(String[] stringArray) {
        for (int i = 0; i < stringArray.length / 2; i++) {
            String temp = stringArray[i];
            stringArray[i] = stringArray[stringArray.length - i - 1];
            stringArray[stringArray.length - i - 1] = temp;
        }
        return stringArray;
    }

    /**
     * sorterar en array med strings i alfabetisk ordning
     *
     * @param stringArray arrayn som ska sorteras
     * @return den sorterade arrayn
     */
    private String[] sortAlphabet(String[] stringArray) {
        for (int i = stringArray.length - 1; i >= 0; i--) { // bubble sort
            for (int j = 0; j < i; j++) {
                if ((int) (stringArray[j].charAt(0)) > (int) (stringArray[j + 1].charAt(0))) { // sorterar efter unicoden av första bokstaven i namnen
                    String temp = stringArray[j];
                    stringArray[j] = stringArray[j + 1];
                    stringArray[j + 1] = temp;
                }
            }
        }
        return stringArray;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBlackSearch;
    private javax.swing.JButton btnBlackSortAlphabet;
    private javax.swing.JButton btnBlackSortFlip;
    private javax.swing.JButton btnBlackSortTime;
    private javax.swing.JButton btnChoosePiece;
    private javax.swing.JButton btnCloseChooser;
    private javax.swing.JButton btnOpenChooser;
    private javax.swing.JButton btnWhiteSearch;
    private javax.swing.JButton btnWhiteSortAlphabet;
    private javax.swing.JButton btnWhiteSortFlip;
    private javax.swing.JButton btnWhiteSortTime;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBlackSearch;
    private javax.swing.JLabel lblCapturedBlack;
    private javax.swing.JLabel lblCapturedWhite;
    private javax.swing.JLabel lblChoosePiece;
    private javax.swing.JLabel lblWhiteSearch;
    private javax.swing.JPanel pnlChoosePiece;
    private javax.swing.JTextArea txaBlack;
    private javax.swing.JTextArea txaPieceList;
    private javax.swing.JTextArea txaWhite;
    private javax.swing.JTextField txfBlackSearch;
    private javax.swing.JTextField txfChoosePiece;
    private javax.swing.JTextField txfWhiteSearch;
    // End of variables declaration//GEN-END:variables

}
